---
description: 
globs: 
alwaysApply: false
---
---
description: ENFORCE Python code style standards and best practices for consistent, maintainable, and efficient code
globs: ["**/*.py", "**/*.pyi"]
crossRefs:
  - 001-rule-generator.mdc
  - 002-rule-organization.mdc
  - 400-md-docs.mdc
alwaysApply: true
---

# Python Code Style Standards

## Context
- When writing or modifying Python code
- When implementing new features
- When reviewing Python code

## Requirements

### Code Formatting
- Use Black for code formatting with default settings (88 char line length)
- Follow PEP 8 guidelines:
  - 4 spaces for indentation
  - Two blank lines between top-level classes/functions
  - One blank line between methods
  - No trailing whitespace

### Type Hints
- Use type hints for all function parameters and return values
- Import types from `typing` module
- Use `TypeVar` for generic types
- Specify `Optional` types with `| None` syntax (Python 3.10+)

### Docstrings
- Use Google-style docstrings for public functions and classes
- Include: Args, Returns, Raises (if applicable)
- Keep docstrings concise but informative

### Error Handling
- Use specific exception types
- Create custom exceptions for domain-specific errors
- Handle exceptions at appropriate levels
- Avoid bare except clauses

### Testing
- Write unit tests for all functions
- Follow Arrange-Act-Assert pattern
- Use descriptive test names
- Test edge cases and error conditions

## Example
```python
from typing import TypeVar, Sequence

T = TypeVar("T")

def find_first(items: Sequence[T], predicate: Callable[[T], bool]) -> T | None:
    """Find first item matching predicate.

    Args:
        items: Sequence to search
        predicate: Function to test items

    Returns:
        First matching item or None
    """
    return next((item for item in items if predicate(item)), None)
```

## Best Practices
1. Use type hints consistently
2. Write clear docstrings
3. Follow PEP 8 guidelines
4. Use Black for formatting
5. Implement proper error handling
6. Write comprehensive tests

## Technical Metadata
- Category: Python Development
- Priority: High
- Dependencies:
  - Python 3.10+
  - Black
  - mypy
  - pytest

<version>1.0.1</version> 