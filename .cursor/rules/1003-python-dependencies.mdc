---
description: ENFORCE standardized Python dependency management practices for reliable and reproducible environments
globs: ["pyproject.toml", "poetry.lock", "requirements*.txt", "Pipfile", "Pipfile.lock"]
crossRefs:
  - 001-rule-generator.mdc
  - 002-rule-organization.mdc
  - 1000-python-code-style.mdc
  - 1002-python-project-structure.mdc
alwaysApply: true
---

# Python Dependency Management Standards

## Context
- When managing Python project dependencies
- When setting up development environments
- When updating package versions

## Requirements

### Dependency Management
- Use Poetry for dependency management
- Maintain pyproject.toml and poetry.lock files
- Organize dependencies into groups (main, dev, test, docs)
- Use semantic versioning constraints

### Version Constraints
- Use semantic versioning operators:
  - `^2.0.0`: Allow patch and minor updates
  - `~1.24.0`: Allow only patch updates
  - `>=1.3.0,<2.0.0`: Explicit range

### Essential Commands
```bash
# Update dependencies
poetry update

# Install dependencies
poetry install

# Export requirements
poetry export -f requirements.txt --output requirements.txt

# Create/activate environment
poetry env use python3.10
poetry shell
```

## Example
```toml
[tool.poetry]
name = "project-name"
version = "0.1.0"
description = "Project description"
authors = ["Author <author@example.com>"]

[tool.poetry.dependencies]
python = "^3.10"
pandas = "^2.0.0"
numpy = "^1.24.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
black = "^23.0.0"
mypy = "^1.5.0"
```

## Best Practices
1. Use Poetry for dependency management
2. Maintain separate dependency groups
3. Pin dependency versions
4. Keep lock files updated
5. Use virtual environments
6. Regular security updates

## Technical Metadata
- Category: Python Development
- Priority: High
- Dependencies:
  - Poetry
  - Python 3.10+
  - Git

<version>1.0.1</version> 